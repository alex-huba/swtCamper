FROM node:10 as checkformat
WORKDIR /app
COPY ./swtcamper/package.json /app/package.json
COPY ./swtcamper/package-lock.json /app/package-lock.json
RUN npm install
COPY ./swtcamper/ /app
ENTRYPOINT ["npm", "run", "ci-prettier-check"]

FROM aldanial/cloc as cloc
RUN apt-get update && apt-get install --yes --no-install-recommends jq curl cloc
WORKDIR /app
COPY ./swtcamper /app/swtcamper
COPY ./.git/ /app

FROM cloc as metric_loc_java
ENV METRIC=LOC_JAVA
WORKDIR /app
ENTRYPOINT BRANCH=$(git branch | sed -n 's/^\* //p'); \
HASH=$(git rev-parse --short HEAD); \
VALUE=$(cloc ./swtcamper --json | jq -r '.Java.code'); \
ZEIT=$(git show -s --format=%ct ${HASH}); \
curl --silent -0 -X POST ${APIENDPOINT} \
-H "Expect:" \
-H 'Content-Type: application/json; charset=utf-8' \
--data "{ \
    \"writeCode\": \"${WRITECODE}\", \
    \"metric\": \"${METRIC}\", \
    \"commitHash\": \"${HASH}\", \
    \"branch\": \"${CI_COMMIT_BRANCH}\", \
    \"value\": \"${VALUE}\", \
    \"date\": \"${ZEIT}\", \
    \"projectId\": ${PROJECTID} \
}"

FROM cloc as metric_loc_java_main
ENV METRIC=LOC_JAVA_MAIN
WORKDIR /app
ENTRYPOINT BRANCH=$(git branch | sed -n 's/^\* //p'); \
HASH=$(git rev-parse --short HEAD); \
VALUE=$(cloc ./swtcamper/src/main --json | jq -r '.Java.code'); \
ZEIT=$(git show -s --format=%ct ${HASH}); \
curl --silent -0 -X POST ${APIENDPOINT} \
-H "Expect:" \
-H 'Content-Type: application/json; charset=utf-8' \
--data "{ \
    \"writeCode\": \"${WRITECODE}\", \
    \"metric\": \"${METRIC}\", \
    \"commitHash\": \"${HASH}\", \
    \"branch\": \"${CI_COMMIT_BRANCH}\", \
    \"value\": \"${VALUE}\", \
    \"date\": \"${ZEIT}\", \
    \"projectId\": ${PROJECTID} \
}"

FROM cloc as metric_loc_java_test
ENV METRIC=LOC_JAVA_TEST
WORKDIR /app
ENTRYPOINT BRANCH=$(git branch | sed -n 's/^\* //p'); \
HASH=$(git rev-parse --short HEAD); \
VALUE=$(cloc ./swtcamper/src/test --json | jq -r '.Java.code'); \
ZEIT=$(git show -s --format=%ct ${HASH}); \
curl --silent -0 -X POST ${APIENDPOINT} \
-H "Expect:" \
-H 'Content-Type: application/json; charset=utf-8' \
--data "{ \
    \"writeCode\": \"${WRITECODE}\", \
    \"metric\": \"${METRIC}\", \
    \"commitHash\": \"${HASH}\", \
    \"branch\": \"${CI_COMMIT_BRANCH}\", \
    \"value\": \"${VALUE}\", \
    \"date\": \"${ZEIT}\", \
    \"projectId\": ${PROJECTID} \
}"



FROM openjdk:11-jdk-slim as compile
WORKDIR /app
COPY ./swtcamper/gradle/ /app/gradle/
COPY ./swtcamper/build.gradle /app/build.gradle
COPY ./swtcamper/settings.gradle /app/settings.gradle
COPY ./swtcamper/gradlew /app/gradlew
# cache gradle dependencies
RUN chmod +x /app/gradlew
RUN /app/gradlew build || return 0
# build app without testing
RUN chmod +x /app/gradlew
COPY ./swtcamper/ /app
ENTRYPOINT ["./gradlew", "--no-daemon", "compileJava"] 

FROM compile as testcoverage
ENV METRIC=COV_JAVA
WORKDIR /app
# print coverage
RUN apt-get update && apt-get install --yes --no-install-recommends git curl
COPY ./.git/ /app
# ENTRYPOINT ["./gradlew", "--no-daemon", "coverageReport"] 
ENTRYPOINT ./gradlew --no-daemon coverageReport > log.txt; \
BRANCH=$(git branch | sed -n 's/^\* //p'); \
HASH=$(git rev-parse --short HEAD); \
VALUE=$(grep -oP "Total \K([0-9]+)" log.txt); \
# VALUE=$(cloc ./swtcamper/src/test --json | jq -r '.Java.code'); \
ZEIT=$(git show -s --format=%ct ${HASH}); \
curl --silent -0 -X POST ${APIENDPOINT} \
-H "Expect:" \
-H 'Content-Type: application/json; charset=utf-8' \
--data "{ \
    \"writeCode\": \"${WRITECODE}\", \
    \"metric\": \"${METRIC}\", \
    \"commitHash\": \"${HASH}\", \
    \"branch\": \"${CI_COMMIT_BRANCH}\", \
    \"value\": \"${VALUE}\", \
    \"date\": \"${ZEIT}\", \
    \"projectId\": ${PROJECTID} \
}"
